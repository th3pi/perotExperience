{"version":3,"sources":["CircleFade.tsx"],"names":["React","Animated","View","defaultProps","AnimationContainer","stagger","CircleFade","props","size","color","style","animating","hidesWhenStopped","rest","circleStyle","position","width","height","backgroundColor","borderRadius","circleFade","value","duration","keyframes","values","alignItems","justifyContent","opacity","map","index","interpolate","inputRange","outputRange","transform","rotate","translateY","scale","Component"],"mappings":"sjBAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,QAAT,CAAmBC,IAAnB,KAA+B,cAA/B,CACA,OAAuBC,YAAvB,KAA2C,gBAA3C,CACA,MAAOC,CAAAA,kBAAP,KAA+B,sBAA/B,CACA,OAASC,OAAT,KAAwB,SAAxB,C,GAEqBC,CAAAA,U,mRAGV,iBAQH,KAAKC,KARF,CAELC,IAFK,aAELA,IAFK,CAGLC,KAHK,aAGLA,KAHK,CAILC,KAJK,aAILA,KAJK,CAKLC,SALK,aAKLA,SALK,CAMLC,gBANK,aAMLA,gBANK,CAOFC,IAPE,+FASP,GAAMC,CAAAA,WAAW,CAAG,CAClBC,QAAQ,CAAE,UADQ,CAElBC,KAAK,CAAER,IAAI,CAAG,IAFI,CAGlBS,MAAM,CAAET,IAAI,CAAG,IAHG,CAIlBU,eAAe,CAAET,KAJC,CAKlBU,YAAY,CAAGX,IAAI,CAAG,IAAR,CAAgB,CALZ,CAApB,CAQA,MACE,qBAAC,kBAAD,EACE,aAAa,CAAE,+BAAO,CACpBY,UAAU,CAAE,oBAACC,KAAD,QACVhB,CAAAA,OAAO,CAAC,GAAD,CAAM,EAAN,CAAU,CACfiB,QAAQ,CAAE,IADK,CAEfD,KAAK,CAAEA,KAFQ,CAGfE,SAAS,CAAE,CAAC,CAAD,CAAI,EAAJ,CAAQ,EAAR,CAAY,GAAZ,CAHI,CAAV,CADG,EADQ,CAAP,EADjB,CASE,SAAS,CAAEZ,SATb,iDAWG,SAACa,MAAD,QACC,qBAAC,IAAD,WACE,KAAK,CAAE,CACL,CACER,KAAK,CAAER,IADT,CAEES,MAAM,CAAET,IAFV,CAGEiB,UAAU,CAAE,QAHd,CAIEC,cAAc,CAAE,QAJlB,CAKEC,OAAO,CAAE,CAAChB,SAAD,EAAcC,gBAAd,CAAiC,CAAjC,CAAqC,CALhD,CADK,CAQLF,KARK,CADT,EAWMG,IAXN,mDAaGW,MAAM,CAACJ,UAAP,CAAkBQ,GAAlB,CAAsB,SAACP,KAAD,CAAQQ,KAAR,QACrB,qBAAC,QAAD,CAAU,IAAV,EACE,GAAG,CAAEA,KADP,CAEE,KAAK,CAAE,CACLf,WADK,CAEL,CACEa,OAAO,CAAEN,KAAK,CAACS,WAAN,CAAkB,CACzBC,UAAU,CAAE,CAAC,CAAD,CAAI,EAAJ,CAAQ,EAAR,CAAY,GAAZ,CADa,CAEzBC,WAAW,CAAE,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAAU,CAAV,CAFY,CAAlB,CADX,CAKEC,SAAS,CAAE,CACT,CACEC,MAAM,CAAKL,KAAK,CAAG,EAAb,MADR,CADS,CAIT,CAAEM,UAAU,CAAE,CAAC3B,IAAD,CAAQ,CAAR,CAAaA,IAAI,CAAG,IAAR,CAAgB,CAA1C,CAJS,CAKT,CACE4B,KAAK,CAAEf,KAAK,CAACS,WAAN,CAAkB,CACvBC,UAAU,CAAE,CAAC,CAAD,CAAI,EAAJ,CAAQ,EAAR,CAAY,GAAZ,CADW,CAEvBC,WAAW,CAAE,CAAC,GAAD,CAAM,GAAN,CAAW,CAAX,CAAc,GAAd,CAFU,CAAlB,CADT,CALS,CALb,CAFK,CAFT,iDADqB,EAAtB,CAbH,CADD,EAXH,CADF,CAwDD,C,wBA5EqChC,KAAK,CAACqC,S,EAAzB/B,U,CACZH,Y,CAAeA,Y,QADHG,U","sourcesContent":["import * as React from 'react'\nimport { Animated, View } from 'react-native'\nimport { SpinnerProps, defaultProps } from './SpinnerProps'\nimport AnimationContainer from './AnimationContainer'\nimport { stagger } from './utils'\n\nexport default class CircleFade extends React.Component<SpinnerProps> {\n  static defaultProps = defaultProps\n\n  render() {\n    const {\n      size,\n      color,\n      style,\n      animating,\n      hidesWhenStopped,\n      ...rest\n    } = this.props\n    const circleStyle = {\n      position: 'absolute',\n      width: size * 0.15,\n      height: size * 0.15,\n      backgroundColor: color,\n      borderRadius: (size * 0.15) / 2,\n    }\n\n    return (\n      <AnimationContainer<'circleFade'>\n        initAnimation={() => ({\n          circleFade: (value) =>\n            stagger(100, 12, {\n              duration: 1200,\n              value: value,\n              keyframes: [0, 39, 40, 100],\n            }),\n        })}\n        animating={animating}\n      >\n        {(values) => (\n          <View\n            style={[\n              {\n                width: size,\n                height: size,\n                alignItems: 'center',\n                justifyContent: 'center',\n                opacity: !animating && hidesWhenStopped ? 0 : 1,\n              },\n              style,\n            ]}\n            {...rest}\n          >\n            {values.circleFade.map((value, index) => (\n              <Animated.View\n                key={index}\n                style={[\n                  circleStyle,\n                  {\n                    opacity: value.interpolate({\n                      inputRange: [0, 39, 40, 100],\n                      outputRange: [0, 0, 1, 0],\n                    }),\n                    transform: [\n                      {\n                        rotate: `${index * 30}deg`,\n                      },\n                      { translateY: -size / 2 + (size * 0.15) / 2 },\n                      {\n                        scale: value.interpolate({\n                          inputRange: [0, 39, 40, 100],\n                          outputRange: [0.6, 0.6, 1, 0.6],\n                        }),\n                      },\n                    ],\n                  },\n                ]}\n              />\n            ))}\n          </View>\n        )}\n      </AnimationContainer>\n    )\n  }\n}\n"]}