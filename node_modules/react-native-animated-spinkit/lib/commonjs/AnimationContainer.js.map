{"version":3,"sources":["AnimationContainer.tsx"],"names":["AnimationContainer","props","animatedValuesByKey","interpolationsByKey","startAnimation","animation","start","stopAnimation","stop","key","setValue","initAnimation","animationInitializersByKey","animations","animationInitializer","animationValue","Animated","Value","values","push","length","parallel","prevProps","animating","children","React","Component","defaultProps"],"mappings":"ktBAAA,oDACA,yC,GAeqBA,CAAAA,kB,wFAiBnB,4BAAYC,KAAZ,CAA6B,iEAC3B,8GAAMA,KAAN,GAD2B,MAb7BC,mBAa6B,CAboB,EAapB,OAT7BC,mBAS6B,CANzB,EAMyB,OAuC7BC,cAvC6B,CAuCZ,UAAM,CACrB,MAAKC,SAAL,CAAeC,KAAf,GACD,CAzC4B,OA2C7BC,aA3C6B,CA2Cb,UAAM,CACpB,MAAKF,SAAL,CAAeG,IAAf,GAEA,IAAK,GAAMC,CAAAA,GAAX,GAAkB,OAAKP,mBAAvB,CAA4C,CAC1C,MAAKA,mBAAL,CAAyBO,GAAzB,EAA8BC,QAA9B,CAAuC,CAAvC,EACD,CACF,CAjD4B,IAEnBC,CAAAA,aAFmB,CAEDV,KAFC,CAEnBU,aAFmB,CAI3B,GAAMC,CAAAA,0BAA0B,CAAGD,aAAa,EAAhD,CACA,GAAME,CAAAA,UAAyC,CAAG,EAAlD,CAEA,IAAK,GAAMJ,CAAAA,GAAX,GAAkBG,CAAAA,0BAAlB,CAA8C,CAC5C,GAAME,CAAAA,oBAAoB,CAAGF,0BAA0B,CAACH,GAAD,CAAvD,CACA,GAAMM,CAAAA,cAAc,CAAG,GAAIC,uBAASC,KAAb,CAAmB,CAAnB,CAAvB,CACA,MAAKf,mBAAL,CAAyBO,GAAzB,EAAgCM,cAAhC,CAH4C,0BAIdD,oBAAoB,CAACC,cAAD,CAJN,CAIpCV,SAJoC,uBAIpCA,SAJoC,CAIzBa,MAJyB,uBAIzBA,MAJyB,CAK5CL,UAAU,CAACM,IAAX,CAAgBd,SAAhB,EACA,MAAKF,mBAAL,CAAyBM,GAAzB,EAAgCS,MAAhC,CACD,CAED,GAAIL,UAAU,CAACO,MAAX,GAAsB,CAA1B,CAA6B,CAC3B,MAAKf,SAAL,CAAiBQ,UAAU,CAAC,CAAD,CAA3B,CACD,CAFD,IAEO,CACL,MAAKR,SAAL,CAAiBW,sBAASK,QAAT,CAAkBR,UAAlB,CAAjB,CACD,CApB0B,aAqB5B,C,yGAEmB,CAClB,KAAKT,cAAL,GACD,C,8DAEkBkB,S,CAAqB,IAC9BC,CAAAA,SAD8B,CAChB,KAAKtB,KADW,CAC9BsB,SAD8B,CAGtC,GAAIA,SAAS,GAAKD,SAAS,CAACC,SAA5B,CAAuC,CACrC,GAAIA,SAAJ,CAAe,CACb,KAAKnB,cAAL,GACD,CAFD,IAEO,CACL,KAAKG,aAAL,GACD,CACF,CACF,C,mEAcsB,CACrB,KAAKF,SAAL,CAAeG,IAAf,GACD,C,uCAEQ,IACCgB,CAAAA,QADD,CACc,KAAKvB,KADnB,CACCuB,QADD,CAEP,MAAOA,CAAAA,QAAQ,CAAGA,QAAQ,CAAC,KAAKrB,mBAAN,CAAX,CAAwC,IAAvD,CACD,C,gCAzEOsB,KAAK,CAACC,S,qCAFK1B,kB,CAaZ2B,Y,CAAe,CACpBJ,SAAS,CAAE,IADS,C","sourcesContent":["import * as React from 'react'\nimport { Animated } from 'react-native'\n\ninterface AnimationNode {\n  animation: Animated.CompositeAnimation\n  values: Animated.AnimatedInterpolation[]\n}\n\nexport interface Props<T extends string> {\n  initAnimation: () => Record<T, (value: Animated.Value) => AnimationNode>\n  children: (\n    interpolationsByKey: Record<T, Animated.AnimatedInterpolation[]>\n  ) => React.ReactNode\n  animating: boolean\n}\n\nexport default class AnimationContainer<\n  T extends string\n> extends React.Component<Props<T>> {\n  animation: Animated.CompositeAnimation\n  animatedValuesByKey: Record<T, Animated.Value> = {} as Record<\n    T,\n    Animated.Value\n  >\n  interpolationsByKey: Record<\n    T,\n    Animated.AnimatedInterpolation[]\n  > = {} as Record<T, Animated.AnimatedInterpolation[]>\n\n  static defaultProps = {\n    animating: true,\n  }\n\n  constructor(props: Props<T>) {\n    super(props)\n    const { initAnimation } = props\n\n    const animationInitializersByKey = initAnimation()\n    const animations: Animated.CompositeAnimation[] = []\n\n    for (const key in animationInitializersByKey) {\n      const animationInitializer = animationInitializersByKey[key]\n      const animationValue = new Animated.Value(0)\n      this.animatedValuesByKey[key] = animationValue\n      const { animation, values } = animationInitializer(animationValue)\n      animations.push(animation)\n      this.interpolationsByKey[key] = values\n    }\n\n    if (animations.length === 1) {\n      this.animation = animations[0]\n    } else {\n      this.animation = Animated.parallel(animations)\n    }\n  }\n\n  componentDidMount() {\n    this.startAnimation()\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const { animating } = this.props\n\n    if (animating !== prevProps.animating) {\n      if (animating) {\n        this.startAnimation()\n      } else {\n        this.stopAnimation()\n      }\n    }\n  }\n\n  startAnimation = () => {\n    this.animation.start()\n  }\n\n  stopAnimation = () => {\n    this.animation.stop()\n\n    for (const key in this.animatedValuesByKey) {\n      this.animatedValuesByKey[key].setValue(0)\n    }\n  }\n\n  componentWillUnmount() {\n    this.animation.stop()\n  }\n\n  render() {\n    const { children } = this.props\n    return children ? children(this.interpolationsByKey) : null\n  }\n}\n"]}